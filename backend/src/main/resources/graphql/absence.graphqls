enum AbsenceType {
  SICK
  VACATION
  PERSONAL
  FORMATION
  OTHER
  RTT
}

enum AbsenceStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AbsencePeriod {
  AM
  PM
  FULL_DAY
}


type AbsenceDay {
  id: ID!
  absenceDate: String!     
  period: AbsencePeriod!
  startTime: String        
  endTime: String          
}

type Absence {
  id: ID!
  userId: ID!
  startDate: String!      
  endDate: String!        
  type: AbsenceType!
  reason: String
  supportingDocumentUrl: String
  status: AbsenceStatus!
  approvedBy: ID
  approvedAt: String      
  createdAt: String       
  updatedAt: String       
  days: [AbsenceDay!]!
}

input AbsenceCreateInput {
  startDate: String!
  endDate: String!
  type: AbsenceType!
  reason: String
  supportingDocumentUrl: String
  periodByDate: [PeriodByDateInput!]
}

input PeriodByDateInput {
  date: String!            
  period: AbsencePeriod!   
}

input AbsenceUpdateInput {
  startDate: String
  endDate: String
  type: AbsenceType
  reason: String
  supportingDocumentUrl: String
  periodByDate: [PeriodByDateInput!]
}

input AbsenceStatusUpdateInput {
  status: AbsenceStatus!  
}

extend type Query {
  myAbsences: [Absence!]!
  absencesByUser(userId: ID!): [Absence!]!
  allAbsences: [Absence!]!
  absence(id: ID!): Absence
  myTeamAbsences(teamId: ID): [Absence!]!
}

extend type Mutation {
  createAbsence(input: AbsenceCreateInput!): Absence!
  updateAbsence(id: ID!, input: AbsenceUpdateInput!): Absence!
  setAbsenceStatus(id: ID!, input: AbsenceStatusUpdateInput!): Absence!
  deleteAbsence(id: ID!): Boolean!
}
